name: CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - _infra/spinnaker/**
  pull_request:
    branches: [ main ]
    paths-ignore:
      - _infra/spinnaker/**
      - _infra/helm/survey/Chart.yaml

env:
  IMAGE: survey
  REGISTRY_HOSTNAME: eu.gcr.io
  HOST: ${{ secrets.GOOGLE_PROJECT_ID }}
  RELEASE_HOST: ${{ secrets.RELEASE_PROJECT_ID }}
  CHART_DIRECTORY: _infra/helm/survey
  SPINNAKER_TOPIC: ${{ secrets.SPINNAKER_TOPIC }}
  ARTIFACT_BUCKET: ${{ secrets.ARTIFACT_BUCKET }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
        token: ${{ secrets.BOT_TOKEN }}

    - name: Run Tests
      run: |
        make test
        make integration-test
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_key: ${{ secrets.GCR_KEY }}
      # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        gcloud auth configure-docker

  # Build the Docker image
    - name: pr docker tag
      if: github.ref != 'refs/heads/main'
      id: tag
      run: |
        PR=$(echo "$GITHUB_REF" | awk -F / '{print $3}')
        echo "$PR"
        echo ::set-output name=pr_number::pr-"$PR"
    - name: Build Docker Image
      if: github.ref != 'refs/heads/main'
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$HOST"/"$IMAGE":${{ steps.tag.outputs.pr_number }} .
    - name: Publish Docker Image
      if: github.ref != 'refs/heads/main'
      run: |
        docker push "$REGISTRY_HOSTNAME"/"$HOST"/"$IMAGE":${{ steps.tag.outputs.pr_number }}

    - name: template helm
      run: |
       helm template $CHART_DIRECTORY
    
    - name: package helm
      run: |
        echo HELM_VERSION=$(grep -E "version:\s+" $CHART_DIRECTORY/Chart.yaml | cut -d" " -f2 | sed -r 's/"//g') >> $GITHUB_ENV
        helm dep up $CHART_DIRECTORY
        helm package $CHART_DIRECTORY

    - name: Publish dev Chart
      if: github.ref != 'refs/heads/main'
      run: |
        mv $IMAGE-${{ env.HELM_VERSION }}.tgz $IMAGE-latest.tgz
        gsutil cp $IMAGE-*.tgz gs://$ARTIFACT_BUCKET/$IMAGE/

    - name: Set current tag
      if: github.ref != 'refs/heads/main'
      id: vars
      run: |
        git fetch --tags
        echo ::set-output name=tag::$(git describe --tags --abbrev=0)

    - name: update version
      if: github.ref != 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
        COMMIT_MSG: |
          auto patch increment
      shell: bash
      run: |
        echo "Current git version: ${{ steps.vars.outputs.tag }}"
        export APP_VERSION=$(grep -E "appVersion:\s+" $CHART_DIRECTORY/Chart.yaml | cut -d" " -f2 | sed -r 's/"//g')
        echo "appVersion: $APP_VERSION"
        if [ ${{ steps.vars.outputs.tag }} = $APP_VERSION ]; then
          echo "versions match, incrementing patch"
          OLD_PATCH=$(echo ${{ steps.vars.outputs.tag }} | cut -d '.' -f3)
          echo "OLD patch: $OLD_PATCH"
          NEW_PATCH=$(($OLD_PATCH + 1))
          echo "New patch version: $NEW_PATCH"
          NEW_VERSION="appVersion: $(echo ${{ steps.vars.outputs.tag }} | sed -e "s/[0-9]\{1,3\}/$NEW_PATCH/3")"
          echo "new version: $NEW_VERSION"
          sed -i -e "s/appVersion: .*/$NEW_VERSION/g" $CHART_DIRECTORY/Chart.yaml

          git config user.name "ras-rm-pr-bot"
          git config user.email "${{ secrets.BOT_EMAIL }}"

          git remote set-url origin https://ras-rm-pr-bot:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git

          git remote update
          git fetch
          git checkout ${{ github.head_ref }}
          git add $CHART_DIRECTORY/Chart.yaml
          git commit -m "$COMMIT_MSG"

          git push 
        else
          echo "git version and appVersion do not not match"
          echo "Using current appVersion: $APP_VERSION"
        fi

    - name: output new version
      if: github.ref == 'refs/heads/main'
      id: release
      shell: bash
      run: |
        echo ::set-output name=version::$(grep -E "appVersion:\s+" $CHART_DIRECTORY/Chart.yaml | cut -d" " -f2 | sed -r 's/"//g')

    - name: Build Release Image
      if: github.ref == 'refs/heads/main'
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$RELEASE_HOST"/"$IMAGE":${{ steps.release.outputs.version }} .
    - name: Push Release image
      if: github.ref == 'refs/heads/main'
      run: |
        docker push "$REGISTRY_HOSTNAME"/"$RELEASE_HOST"/"$IMAGE":${{ steps.release.outputs.version }}
    
    - name: Publish Charts
      if: github.ref == 'refs/heads/main'
      run: |
        gsutil cp $IMAGE-*.tgz gs://$ARTIFACT_BUCKET/$IMAGE/

    - uses: actions/create-release@v1
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release.outputs.version }}
        release_name: ${{ steps.release.outputs.version }}
        body: |
          Automated release
          ${{ steps.release.outputs.version }}
        draft: false
        prerelease: false

    - name: CD hook
      if: github.ref == 'refs/heads/main'
      run: |
        gcloud pubsub topics publish $SPINNAKER_TOPIC --project $HOST \
        --message "{ \"kind\": \"storage#object\", \"name\": \"$IMAGE/$IMAGE-${{ env.HELM_VERSION }}.tgz\", \"bucket\": \"$ARTIFACT_BUCKET\" }" \
        --attribute cd="actions"
